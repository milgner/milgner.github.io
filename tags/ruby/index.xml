<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ruby on Marcus Ilgner</title><link>https://marcusilgner.com/tags/ruby/</link><description>Recent content in ruby on Marcus Ilgner</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><lastBuildDate>Tue, 03 May 2022 08:48:10 +0200</lastBuildDate><atom:link href="https://marcusilgner.com/tags/ruby/index.xml" rel="self" type="application/rss+xml"/><item><title>Idiomatic Coding: Ruby Hash (&amp; Python Dict)</title><link>https://marcusilgner.com/posts/2022-05-03-idiomatic-coding-ruby-hashes/</link><pubDate>Tue, 03 May 2022 08:48:10 +0200</pubDate><guid>https://marcusilgner.com/posts/2022-05-03-idiomatic-coding-ruby-hashes/</guid><description>Idiomatic Ruby: Hash vs class It is no secret that I&amp;rsquo;m a big fan of typed languages. To me, an expressive type system really helps to convey the mental model of the application to the developers maintaining the code base.
As such, I am often dismayed when reading code from untyped interpreted languages. Sure, there are classes in Javascript, Ruby and Python. But very often I find that they&amp;rsquo;re eschewed in favour of just bundling a list of attributes together in an untyped Object, Hash or Dict respectively.</description></item></channel></rss>