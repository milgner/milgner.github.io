<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ruby on Marcus Ilgner</title>
    <link>https://marcusilgner.com/tags/ruby/</link>
    <description>Recent content in Ruby on Marcus Ilgner</description>
    <generator>Hugo</generator>
    <language>en-uk</language>
    <lastBuildDate>Wed, 04 May 2022 01:06:00 +0200</lastBuildDate>
    <atom:link href="https://marcusilgner.com/tags/ruby/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rails Value Objects</title>
      <link>https://marcusilgner.com/posts/2022-05-04-rails-value-objects/</link>
      <pubDate>Wed, 04 May 2022 01:06:00 +0200</pubDate>
      <guid>https://marcusilgner.com/posts/2022-05-04-rails-value-objects/</guid>
      <description>&lt;h1 id=&#34;value-objects-in-rails&#34;&gt;&#xA;  Value Objects in Rails&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#value-objects-in-rails&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;While writing yesterdays post about the usage of &lt;code&gt;Hash&lt;/code&gt; vs &lt;code&gt;class&lt;/code&gt;, I couldn&amp;rsquo;t&#xA;help but think of another powerful tool that helps us to build a well-defined&#xA;model of our problem domain in the programming language of our choice: the&#xA;&lt;em&gt;value object&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;p&gt;To understand the value of value objects (&lt;em&gt;scnr&lt;/em&gt;), let&amp;rsquo;s take an example:&#xA;&lt;code&gt;42&lt;/code&gt;. &amp;ldquo;What is &lt;code&gt;42&lt;/code&gt;?&amp;rdquo;, you might be tempted to ask - and rightfully so.&#xA;In Ruby it might be an instance of &lt;code&gt;Integer&lt;/code&gt;, other languages may have cause&#xA;to use a more restrictive definition like &lt;code&gt;u8&lt;/code&gt; or &lt;code&gt;i16&lt;/code&gt;. But still - that&#xA;doesn&amp;rsquo;t help us to understand what &lt;code&gt;42&lt;/code&gt; might mean.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Idiomatic Coding: Ruby Hash (&amp; Python Dict)</title>
      <link>https://marcusilgner.com/posts/2022-05-03-idiomatic-coding-ruby-hashes/</link>
      <pubDate>Tue, 03 May 2022 08:48:10 +0200</pubDate>
      <guid>https://marcusilgner.com/posts/2022-05-03-idiomatic-coding-ruby-hashes/</guid>
      <description>&lt;h1 id=&#34;idiomatic-ruby-hash-vs-class&#34;&gt;&#xA;  Idiomatic Ruby: &lt;code&gt;Hash&lt;/code&gt; vs &lt;code&gt;class&lt;/code&gt;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#idiomatic-ruby-hash-vs-class&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;It is no secret that I&amp;rsquo;m a big fan of typed languages. To me, an expressive type system really helps to convey the mental model of the application to the developers maintaining the code base.&lt;/p&gt;&#xA;&lt;p&gt;As such, I am often dismayed when reading code from untyped interpreted languages. Sure, there are classes in Javascript, Ruby and Python. But very often I find that they&amp;rsquo;re eschewed in favour of just bundling a list of attributes together in an untyped &lt;code&gt;Object&lt;/code&gt;, &lt;code&gt;Hash&lt;/code&gt; or &lt;code&gt;Dict&lt;/code&gt; respectively.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
