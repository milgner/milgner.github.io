<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: titanium | Extroverted Introspection]]></title>
  <link href="http://milgner.github.io/blog/categories/titanium/atom.xml" rel="self"/>
  <link href="http://milgner.github.io/"/>
  <updated>2014-11-09T13:35:59+01:00</updated>
  <id>http://milgner.github.io/</id>
  <author>
    <name><![CDATA[Marcus Ilgner]]></name>
    <email><![CDATA[blog@marcusilgner.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[On mobile app development]]></title>
    <link href="http://milgner.github.io/blog/2014/11/09/on-mobile-app-development/"/>
    <updated>2014-11-09T12:27:19+01:00</updated>
    <id>http://milgner.github.io/blog/2014/11/09/on-mobile-app-development</id>
    <content type="html"><![CDATA[<p>Mobile app development is a mess. Sure, it&rsquo;s getting better but it still has
a long way to go catch up with the development process on the desktop or
even backend technologies.</p>

<p>Last year, german software company SAP <a href="http://blogs.sap.com/innovation/mobile-applications/much-cost-build-app-01241656">cited</a>
that the development costs for a mobile app covering more than one platform
starts at $50.000 and other figures I&rsquo;ve seen concur with that estimate.
Considering that this covers only the initial development, a lot of small and
medium-sized business will think twice about developing their app and again
think doubly on how to keep costs small.
Back at <a href="http://doo.net">doo</a> we had mobile development teams for each
platform, writing native code for each and even adapting workflows to suit
the habits and expectations of users of the respective mobile OS.</p>

<p>But not many teams will be able to afford so much manpower, and so, with a
tight budget and time schedule for our <a href="http://www.evopark.de">evopark</a>
app, I looked at and evaluated a lot of mobile development frameworks in the
past weeks.</p>

<!-- more -->


<p>Currently the main players (in no particular order) are:</p>

<ul>
<li><p><a href="http://cordova.apache.org/">Apache Cordova</a> - also known as PhoneGap -
and its descendants like <a href="http://ionicframework.com/">Ionic</a>.
It mainly uses a web view container to render HTML, CSS and mostly runs
JavaScript but added support for native components in recent releases.</p></li>
<li><p><a href="http://appcelerator.com/">Appcelerator Titanium</a> also uses JavaScript
but added a script-to-native bridge that creates native UI controls to
create a smoother user experience.</p></li>
<li><p><a href="http://xamarin.com/">Xamarin</a> is even more focussed on the &lsquo;native&rsquo; aspect
to improve the user experience. Their per-developer-per-platform price tag
was somewhat off-putting for us but I&rsquo;ve heard a lot of good things from
other developers who use it.</p></li>
<li><p><a href="http://www.appmethod.com/">AppMethod</a> also has a price tag that was outside
our budget but it also looked like an interesting approach. Even if I&rsquo;m
not certain that a C++ codebase - as appealing as some aspects of it are -
is contemporary standard.</p></li>
<li><p><a href="http://qt-project.org/">Qt</a> is one of the oldest cross-platform UI
frameworks on the desktop and is working on expanding into the mobile market.
They&rsquo;re currently restructuring the project to provide better accessibility
to new developers.
After hours of cursing while trying - ultimately without success - to build
the native map module for my Android phone, I decided to wait for that
initiative to progress somewhat further.</p></li>
</ul>


<p>At evopark, being vary of the sluggishness that some HTML-based apps exhibit,
we decided to use Titanium. Now, with a few weeks of development under our
belt, I&rsquo;m still uncertain whether it was the best choice. Certainly, the code
base - in <a href="http://www.coffeescript.org">Literate CoffeeScript</a> - works on both
iOS and Android but we experienced a lot of situations where code would work
fine on one platform and violently crash - with only sparse log entries - on
the other.</p>

<p>And although I could live with some <code>if OS_IOS</code> code, what really boggles my
mind is how bad the developer experience with Titanium is. From starting the
build process to the app opening on a device, no less than a minute will pass.
Change a single line and start the whole thing over. And never mind that the
&ldquo;Titanium Studio&rdquo; IDE with its slow speed seems to be built to prove all
prejudices against Eclipse-based IDEs.</p>

<p>Luckily there is the command line tooling and - most notably - <a href="https://github.com/dbankier/TiShadow/">TiShadow</a>
to get a speedier process. And from what I&rsquo;ve seen of <a href="https://github.com/omorandi/TiInspector">Ti Inspector</a>
it provides some decent debugging when targeting iOS. On Android, it&rsquo;s mostly
debugging like it&rsquo;s (PHP in) 1999: a lot of log-statements to output variable
contents and state. Regarding the use of the IDE&rsquo;s debugger, I refer you to my
previous statement about build times.</p>

<p>Somewhat frustrated by that experience, I took last weekend for a quick look at
Ionic and very much liked what I saw. We now started a side-project with it so
in a few weeks I may be able to compare its HTML5-based performance to that of
Titanium.</p>

<p>Personally I wish that one of these frameworks were more like the Windows 8
SDK. Their HTML-Javascript-based API, together with the possibility to pull in
libraries from a number of <a href="https://en.wikipedia.org/wiki/Common_Language_Runtime">CLR</a>-
supported languages like C# and C++, is really fun to work with and develop
for. And with the help of hardware-accelerated CSS transitions, it&rsquo;s still
fast and fluid to use.</p>
]]></content>
  </entry>
  
</feed>
