<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Marcus Ilgner</title>
    <link>https://marcusilgner.com/posts/</link>
    <description>Recent content in Posts on Marcus Ilgner</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-uk</language>
    <lastBuildDate>Sun, 30 May 2021 14:54:35 +0200</lastBuildDate><atom:link href="https://marcusilgner.com/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A Bit of Git Part 2: Branching Strategies</title>
      <link>https://marcusilgner.com/posts/2021-05-30-a-bit-of-git-part-2-branching-strategies/</link>
      <pubDate>Sun, 30 May 2021 14:54:35 +0200</pubDate>
      
      <guid>https://marcusilgner.com/posts/2021-05-30-a-bit-of-git-part-2-branching-strategies/</guid>
      <description>A bit of git (each day) - Part 2: Branching Strategies    After a short introduction to the git basics, we should talk about branching. If you work on your own, you&amp;rsquo;re free to name your branches any way you like - but if you try to develop software in a team, that&amp;rsquo;s a clear recipe for chaos.
What&amp;rsquo;s a branching strategy?    To solve this issue, you&amp;rsquo;ll have to communicate among your team to specify a branching strategy which defines how to name your branches, how different branches are merged into another and usually also have a say in which version of your software gets deployed or delivered to your users.</description>
    </item>
    
    <item>
      <title>A Bit of Git Part 1</title>
      <link>https://marcusilgner.com/posts/2021-05-29-a-bit-of-git-part-1/</link>
      <pubDate>Sat, 29 May 2021 14:08:33 +0200</pubDate>
      
      <guid>https://marcusilgner.com/posts/2021-05-29-a-bit-of-git-part-1/</guid>
      <description>A bit of git (each day) - Part 1: Basics    Since its inception in 2005, git has quickly established itself as the de-facto standard for version control in software development.
Yet I find that surprisingly many developers struggle with using it to its full potential even after many years of having been in contact with it. There is an excellent book &amp;ldquo;Pro Git&amp;rdquo; available online but for some reason not many people are familiar with its contents or are lacking some focussed exposure to the many aspects therein.</description>
    </item>
    
    <item>
      <title>Wikis aren&#39;t meant for software documentation</title>
      <link>https://marcusilgner.com/posts/2021-05-20-no-wikis-for-software-documentation/</link>
      <pubDate>Thu, 20 May 2021 20:39:10 +0200</pubDate>
      
      <guid>https://marcusilgner.com/posts/2021-05-20-no-wikis-for-software-documentation/</guid>
      <description>Wikis aren&amp;rsquo;t meant for software documentation     &amp;ldquo;Documentation is a love letter that you write to your future self.&amp;rdquo; &amp;ndash; Damian Conway Although there are many arguments being made to rationalize our laziness and avoid writing proper documentation, there is no doubt in my mind that good software documentation is a great tool to improve the development lifecycle of long-running projects.
If you know your project is going to be scrapped in 2 months time, feel free to stop reading here and enjoy a good book or a walk outside.</description>
    </item>
    
    <item>
      <title>Deploy a Vert.x app with an embedded SPA</title>
      <link>https://marcusilgner.com/posts/2021-04-04-deploy-vertx-with-embedded-spa/</link>
      <pubDate>Mon, 05 Apr 2021 13:31:04 +0200</pubDate>
      
      <guid>https://marcusilgner.com/posts/2021-04-04-deploy-vertx-with-embedded-spa/</guid>
      <description>Deploy a Vert.x application with an embedded SPA    As a developer I have come to enjoy the versatility and power of the Vert.x platform. And although it contains many utilities for server-side rendering, called Vert.x Web, there are situations where you might want to use a single-page application (SPA) instead.
Concrete reasons for and against SPAs are best kept separate from this. One thing, however, that makes SPAs cumbersome for small teams is having to deploy them separately from the API they will talk to, so having a setup that allows for deploying everything in one go.</description>
    </item>
    
  </channel>
</rss>
